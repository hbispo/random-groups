window['currentGroups'] = [];
window['previousGroups'] = {
    people: [],
    groups: []
};

// Auto-resizing textarea, obtained at https://stackoverflow.com/a/25621277 (and heavily modified)
function adjustTextArea() {
    hideError();
    groupsForm.people.style.height = 'auto';
    groupsForm.people.style.height = (groupsForm.people.scrollHeight) + 'px';
}
// End of auto-resizing textarea, obtained at https://stackoverflow.com/a/25621277 (and heavily modified)


// Random number in an interval, obtained at https://stackoverflow.com/a/7228322 (and modified)
function randomIntFromInterval(min, max) { // min and max included
    if (min >= max) {
        return min;
    }
    return Math.floor(Math.random() * (max - min + 1) + min);
}
// End of random number in an interval, obtained at https://stackoverflow.com/a/7228322 (and modified)


// Download file from text, obtained at https://stackoverflow.com/a/18197341 (and modified)
function download(text) {
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/json;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', 'groups.json');

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}
// End of download file from text, obtained at https://stackoverflow.com/a/18197341 (and modified)


function hideError() {
    document.getElementById('error').style.visibility = '';
}

function displayError(message) {
    document.getElementById('error').style.visibility = 'visible';
    document.getElementById('error').textContent = message;
    return false;
}

function loadPreviousGroups() {
    hideError();
    let file = groupsForm.previousGroups.files[0];
    if (file.type.toLowerCase().indexOf('json') < 0) {
        groupsForm.previousGroups.value = '';
        return displayError('Please choose a .json file previously generated by this page.');
    }

    const reader = new FileReader();
    reader.addEventListener('load', (event) => {
        window['previousGroups'] = JSON.parse(decodeURIComponent(atob(event.target.result.replace('data:application/json;base64,', ''))));
        if (window['previousGroups'].people) {
            groupsForm.people.value = previousGroups.people.join("\n");
            adjustTextArea();
        } else {
            window['previousGroups'].people = [];
        }
        if (!window['previousGroups'].groups) {
            window['previousGroups'].groups = [];
        }
    });
    reader.readAsDataURL(file);
}

function pickGroups(max, min = 0) {
    hideError();
    window['currentGroups'] = [];
    // Splitting the lines, trimming them, removing non-letters from the beginning of each one and removing the empty ones
    let people = groupsForm.people.value.split("\n").map(function (word) {
        word = word.trim().replace(/^[\d]*[\W]*/, '').trim().toLocaleLowerCase();
        if (!word.length) {
            return word;
        }
        return word[0].toLocaleUpperCase() + word.substr(1);
    }).filter(function (word) {
        return word.length > 0;
    });

    // Removing all duplicate lines
    people = [...new Set(people)];
    window['previousGroups'].people = [...people];
    groupsForm.people.value = window['previousGroups'].people.join("\n");
    adjustTextArea();

    if (people.length <= 1) {
        return displayError('Please enter at least two different people below.');
    }

    let groups = [];
    while (people.length) {
        let group = [];

        for (let i = 0; i < max && people.length; ++i) {
            let available = [...people];
            //If we're filling the last position in this group and there are previous groups to check
            if (i == (max - 1) && window['previousGroups'].groups.length) {
                //Running through previous groupings
                for (let j = 0; j < window['previousGroups'].groups.length; ++j) {
                    //Running through the individual groups of each previous grouping
                    for (let k = 0; k < window['previousGroups'].groups[j].length; ++k) {
                        //If the number of elements in the group was the same as this time
                        if (window['previousGroups'].groups[j][k].length == max) {
                            let allPresent = true;
                            let previous = [...window['previousGroups'].groups[j][k]];
                            //If all members of current group were in this previous group
                            for (let l = 0; l < i; ++l) {
                                let position = previous.indexOf(group[l]);
                                if (position == -1) {
                                    allPresent = false;
                                    break;
                                } else {
                                    previous.splice(position, 1);
                                }
                            }
                            if (allPresent) {
                                //Making the last person unavailable for this group, if it was still available
                                let position = available.indexOf(previous[0]);
                                if (position >= 0) {
                                    available.splice(position, 1);
                                }
                            }
                        }
                    }
                }
            }
            if (!available.length) {
                break;
            }
            let person = randomIntFromInterval(0, available.length - 1);
            people.splice(people.indexOf(available[person]), 1);
            group.push(available.splice(person, 1)[0]);
        }

        groups.push(group);
    }

    window['currentGroups'] = groups;

    groups = groups.map(function (group) {
        return group.join(', ');
    });

    document.getElementById('groupList').innerHTML = '<li>' + groups.join('</li><li>') + '</li>'
    document.getElementById('groups').style.display = 'block';

    let element = document.createElement('a');
    element.setAttribute('href', '#groups');

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}

function downloadGroups() {
    let previous = [...window['previousGroups'].groups];
    window['previousGroups'].groups.push(window['currentGroups']);
    download(encodeURIComponent(JSON.stringify(window['previousGroups'])));
    window['previousGroups'].groups = previous;
}

function resetGroups() {
    window['currentGroups'] = [];
    window['previousGroups'] = {
        people: [],
        groups: []
    };
    groupsForm.reset();

    adjustTextArea();
    document.getElementById('groupList').innerHTML = '';
    document.getElementById('groups').style.display = '';
}